#!/usr/bin/env zsh

#==============================================================================
# Aliases Configuration
#==============================================================================

#------------------------------------------------------------------------------
# Helper Functions
#------------------------------------------------------------------------------

# Check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

#------------------------------------------------------------------------------
# Core System Commands
#------------------------------------------------------------------------------

# TLDR
alias man='tldr'

# WGET
alias wget='wget2'

# GREP
alias grep='grep --color=auto'  # Colorize grep output

# Shell Management
alias reload='source ~/.zshrc'
alias c='clear'

# Editor
alias vi='vim'

# System Monitoring
if command_exists btop; then
    alias top='btop'
else
    alias top='/usr/bin/top'
fi

#------------------------------------------------------------------------------
# File Operations and Navigation
#------------------------------------------------------------------------------

# Directory Operations
alias mkdir='mkdir -p'

# File Listing
if command_exists eza; then
    # Modern file listing with git integration
    if [ "$TERM" = "linux" ]; then
        alias ls='eza -la --group-directories-first --color=always --git --classify --sort=modified --reverse --header'
        alias tree='eza --tree --all --level=3 --color=always'
    else
        alias ls='eza -la --group-directories-first --color=always --git --classify --sort=modified --reverse --header --icons'
        alias tree='eza --icons --tree --all --level=3 --color=always'
    fi
elif command_exists gls; then
    # GNU ls fallback
    alias ls='gls -la --group-directories-first --color=always'
else
    # Basic ls fallback
    alias ls='ls -la'
fi

# File Viewing
if command_exists bat; then
    alias cat='bat'
elif command_exists gcat; then
    alias cat='gcat'
else
    alias cat='cat'
fi

# File Comparison
alias diff='delta --config ~/.dotfiles/.config/delta/deltarc'

# Fuzzy file finder with preview (fzf)
# Using function instead of alias to avoid ZLE widget issues
unalias ff 2>/dev/null  # Remove any existing alias
ff() {
    local file
    file=$(eval "${FZF_DEFAULT_COMMAND:-find . -type f}" | FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" fzf)
    
    if [[ -n "$file" ]]; then
        echo "$file"
    fi
}

#------------------------------------------------------------------------------
# Git Version Control
#------------------------------------------------------------------------------

alias gst='git status'
alias ga='git add'
alias gcm='git commit -m'
alias gco='git checkout'
alias gbr='git branch'
alias gpsh='git push'
alias gpl='git pull'
alias glg='git log --oneline --graph --decorate'

#------------------------------------------------------------------------------
# System Information and Monitoring
#------------------------------------------------------------------------------

alias df='df -h'                     # Disk usage in human readable format
alias du='du -h'                     # Directory size in human readable format
alias free='free -m'                 # Memory usage
alias path='echo ${(F)path}'         # Show PATH entries, one per line
alias now='date +"%T"'               # Current time
alias nowdate='date +"%d-%m-%Y"'     # Current date
alias ports='netstat -tulanp'        # Show active ports

#------------------------------------------------------------------------------
# Network Operations
#------------------------------------------------------------------------------

# alias ping='ping -c 5'               # Limit ping to 5 packets

#------------------------------------------------------------------------------
# System Administration
#------------------------------------------------------------------------------

# Elevated privileges
alias plz='sudo $(fc -ln -1)'        # Repeat last command with sudo
alias reboot='sudo reboot'
alias shutdown='sudo shutdown -h now'

#------------------------------------------------------------------------------
# OS-Specific Configuration
#------------------------------------------------------------------------------

case "$OSTYPE" in
  darwin*)
    #--------------------------------------------------------------------------
    # macOS Configuration
    #--------------------------------------------------------------------------

    # System updates
    update() {
      # Update Homebrew and capture outdated list
      brew update
      local outdated_before=$(brew outdated)
      brew upgrade
      # Restart Tailscale service if it was upgraded
      if echo "$outdated_before" | grep -q '^tailscale$'; then
        echo "Restarting Tailscale brew service..."
        brew services restart tailscale
      fi
    }

    # Brewfile management
    alias brewdump='brew bundle dump --force --no-vscode --file ~/.dotfiles/.bootstrap/macos/Brewfile'

    # GNU command alternatives
    gnu_commands=(
        cp mv rm mkdir rmdir ln du df
        head tail sort wc cut grep xargs find
        chmod chown date stat touch
    )

    # Only alias GNU commands if they are installed
    for cmd in "${gnu_commands[@]}"; do
        if command_exists "g$cmd"; then
            alias "$cmd"="g$cmd"
        fi
    done

# ── dotup / dotall config ────────────────────────────────
alias dotup="$HOME/.dotfiles/helpers/dotup"   # wrapper

# pull latest dot-files from brut and re-apply
alias pullbrut='git -C ~/.dotfiles pull brut:~/.dotfiles main && ~/.dotfiles/helpers/dotup'

# Normal LAN hosts (reachable from anywhere)
typeset -a DOT_HOSTS_LAN=(lucky dreams draco)

# Air-gapped network hosts; only brut can reach them
typeset -a DOT_HOSTS_AIR=(bubbles)

dotall () {
  emulate -L zsh
  local self=$(hostname -s)

  # ── Build target list ────────────────────────────────────────────────
  local targets=("${DOT_HOSTS_LAN[@]}")
  [[ $self == brut ]] && targets+=("${DOT_HOSTS_AIR[@]}")

  # ── SSH option bundles ───────────────────────────────────────────────
  local SSH_KEY_OPTS=(
    -o BatchMode=yes
    -o ConnectTimeout=15
    -o ConnectionAttempts=2
    -o StrictHostKeyChecking=accept-new
  )
  local SSH_INT_OPTS=(
    -o ConnectTimeout=15
    -o ConnectionAttempts=1   # allow password/TouchID prompt
  )

  for h in "${targets[@]}"; do
    [[ $h == $self ]] && continue
    print -P "%F{cyan}[dotall]%f → $h"

    # ── 1. Try key‑only (silent) ────────────────────────────────────
    if ssh "${SSH_KEY_OPTS[@]}" "$h" true 2>/dev/null; then
      ssh "${SSH_KEY_OPTS[@]}" "$h" '~/.dotfiles/helpers/dotup' \
        | sed -u "s/^/[$h] /"
      print -P "%F{green}[dotall]%f ← $h OK"
      continue
    fi

    # ── 2. Key failed → always prompt (uses your ProxyJump) ────────
    print -P "%F{yellow}[dotall]%f no key for $h — prompting…"
    if ssh "${SSH_INT_OPTS[@]}" "$h" '~/.dotfiles/helpers/dotup' \
         | sed -u "s/^/[$h] /"; then
      print -P "%F{green}[dotall]%f ← $h OK (interactive)"
    else
      print -P "%F{red}[dotall]%f ← $h FAILED (interactive)"
    fi
  done

  print -P "%F{cyan}[dotall]%f complete."
}

# ─────────────────────────────────────────────────────────


# ── Misc helpers ──────────────────────────────────────────
# Nuke user processes excluding shell, ssh, and ssh-agent
nuke_user_procs() {
  local verbose=false
  [[ "$1" == "-v" ]] && verbose=true

  local self_shell_pid=$$
  local ssh_pid=$(ps -o ppid= -p "$$" | tr -d ' ')

  ps -u "$USER" -o pid= |
    while read -r pid; do
      [[ "$pid" == "$self_shell_pid" || "$pid" == "$ssh_pid" ]] && continue
      local cmd=$(ps -p "$pid" -o comm= 2>/dev/null)
      [[ "$cmd" == "ssh-agent" ]] && continue
      if $verbose; then
        echo "Killing PID $pid ($cmd)"
      fi
      kill -9 "$pid" 2>/dev/null
    done
}
alias nuke='nuke_user_procs'

;;


  linux-gnu*|linux-musl*)

    #--------------------------------------------------------------------------
    # Linux Configuration
    #--------------------------------------------------------------------------

    alias update='sudo apt update && sudo apt upgrade -y'

    ;;
esac

#------------------------------------------------------------------------------
# Entertainment and Visual
#------------------------------------------------------------------------------

alias fastfetch='$HOME/.dotfiles/.config/fastfetch/fastfetch_wrapper.zsh'