#------------------------------------------------------------------------------
# .zprofile - Login shell configuration
# Loaded for login shells (Terminal.app, SSH sessions, etc.)
#------------------------------------------------------------------------------

# Debug mode - set ZPROFILE_DEBUG=1 to enable verbose logging
DEBUG_MODE=${ZPROFILE_DEBUG:-0}

# Logging functions
debug_log() {
  [[ $DEBUG_MODE -eq 1 ]] && echo "[DEBUG] $*" >&2
}

error_log() {
  echo "[ERROR] $*" >&2
}

warn_log() {
  [[ $DEBUG_MODE -eq 1 ]] && echo "[WARN] $*" >&2
}



#------------------------------------------------------------------------------
# Homebrew Environment
#------------------------------------------------------------------------------
if [[ -x "/opt/homebrew/bin/brew" ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
elif [[ -x "/usr/local/bin/brew" ]]; then
  eval "$(/usr/local/bin/brew shellenv)"
fi

#------------------------------------------------------------------------------
# SSH Agent Configuration
#------------------------------------------------------------------------------

# Create SSH directory structure if needed
[[ -d "$HOME/.ssh" ]] || mkdir -p "$HOME/.ssh" && chmod 700 "$HOME/.ssh"
[[ -d "$HOME/.ssh/sockets" ]] || mkdir -p "$HOME/.ssh/sockets" && chmod 700 "$HOME/.ssh/sockets"

# Configure SSH agent socket
readonly SOCKET="$HOME/.ssh/sockets/ssh_auth_sock"
unset SSH_AUTH_SOCK

# Function to start SSH agent
start_ssh_agent() {
  rm -f "$SOCKET"
  if eval "$(ssh-agent -a "$SOCKET" 2>/dev/null)" >/dev/null 2>&1; then
    export SSH_AUTH_SOCK="$SOCKET"
    debug_log "Started new SSH agent"
    return 0
  else
    error_log "Failed to start SSH agent"
    return 1
  fi
}

# Check if existing agent is alive and reachable
if [[ -S "$SOCKET" ]] && SSH_AUTH_SOCK="$SOCKET" ssh-add -l >/dev/null 2>&1; then
  export SSH_AUTH_SOCK="$SOCKET"
  debug_log "Connected to existing SSH agent"
else
  start_ssh_agent
fi

#------------------------------------------------------------------------------
# Machine-Aware Configuration
#------------------------------------------------------------------------------

# Get consistent host identifier
readonly HOST_ID=$(hostname -s 2>/dev/null || echo "unknown")

# Define SSH keys per machine
declare -a SSH_KEYS=("id_personal")

# Machine-specific SSH key configuration
case "$HOST_ID" in
  "Mac-WD77LWRW")
    SSH_KEYS+=(id_work)
    ;;
  # Add other machines as needed
  # "other-machine")
  #   SSH_KEYS+=(id_other)
  #   ;;
esac

# Function to check if key is already loaded
is_key_loaded() {
  local pub_path="$1"
  local fingerprint
  
  [[ -f "$pub_path" ]] || return 1
  
  fingerprint=$(ssh-keygen -lf "$pub_path" 2>/dev/null | awk '{print $2}')
  [[ -n "$fingerprint" ]] && ssh-add -l 2>/dev/null | grep -q "$fingerprint"
}

# Function to load SSH key
load_ssh_key() {
  local key="$1"
  local key_path="$HOME/.ssh/$key"
  local pub_path="$key_path.pub"
  
  # Validate key files exist
  if [[ ! -f "$key_path" ]]; then
    warn_log "Private key not found: $key_path"
    return 1
  fi
  
  if [[ ! -f "$pub_path" ]]; then
    warn_log "Public key not found: $pub_path"
    return 1
  fi
  
  # Check permissions (should be 600 for private key)
  local key_perms=$(stat -f "%OLp" "$key_path" 2>/dev/null || stat -c "%a" "$key_path" 2>/dev/null)
  if [[ "$key_perms" != "600" ]]; then
    chmod 600 "$key_path"
    debug_log "Fixed permissions for $key_path"
  fi
  
  # Skip if already loaded
  if is_key_loaded "$pub_path"; then
    debug_log "$key already loaded"
    return 0
  fi
  
  # Load the key
  local add_args=()
  
  # On macOS, use Keychain (no timeout needed - Keychain handles persistence)
  if [[ "$OSTYPE" == "darwin"* ]]; then
    add_args+=(--apple-use-keychain)
  else
    # On Linux, use timeout
    add_args+=(-t 3600)
  fi
  
  if ssh-add "${add_args[@]}" "$key_path" >/dev/null 2>&1; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      debug_log "Loaded $key from Keychain"
    else
      debug_log "Loaded $key (1h timeout)"
    fi
    return 0
  else
    error_log "Failed to load SSH key: $key"
    return 1
  fi
}

# Load all configured SSH keys
if [[ -n "$SSH_AUTH_SOCK" ]]; then
  # First, try to load keys from Keychain (macOS only)
  if [[ "$OSTYPE" == "darwin"* ]]; then
    ssh-add --apple-load-keychain 2>/dev/null
  fi
  
  # Then load any keys that aren't already loaded
  for key in "${SSH_KEYS[@]}"; do
    load_ssh_key "$key"
  done
else
  error_log "SSH agent not available - keys not loaded"
fi

#------------------------------------------------------------------------------
# Cleanup
#------------------------------------------------------------------------------
unset DEBUG_MODE
unset -f debug_log error_log warn_log start_ssh_agent is_key_loaded load_ssh_key
