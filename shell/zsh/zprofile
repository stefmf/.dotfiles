#------------------------------------------------------------------------------
# .zprofile - Login shell configuration
# Loaded for login shells (Terminal.app, SSH sessions, etc.)
#------------------------------------------------------------------------------

# Debug mode - set ZPROFILE_DEBUG=1 to enable verbose logging
DEBUG_MODE=${ZPROFILE_DEBUG:-0}

# Logging functions
debug_log() {
  [[ $DEBUG_MODE -eq 1 ]] && echo "[DEBUG] $*" >&2
}

error_log() {
  echo "[ERROR] $*" >&2
}

warn_log() {
  [[ $DEBUG_MODE -eq 1 ]] && echo "[WARN] $*" >&2
}



#------------------------------------------------------------------------------
# Homebrew Environment
#------------------------------------------------------------------------------
if [[ -x "/opt/homebrew/bin/brew" ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
elif [[ -x "/usr/local/bin/brew" ]]; then
  eval "$(/usr/local/bin/brew shellenv)"
fi

#------------------------------------------------------------------------------
# SSH Agent Configuration
#------------------------------------------------------------------------------

# Create SSH directory structure if needed
[[ -d "$HOME/.ssh" ]] || mkdir -p "$HOME/.ssh" && chmod 700 "$HOME/.ssh"

# Configure SSH agent socket
readonly SOCKET="$HOME/.ssh/ssh_auth_sock"
unset SSH_AUTH_SOCK

# Function to start SSH agent
start_ssh_agent() {
  rm -f "$SOCKET"
  if eval "$(ssh-agent -a "$SOCKET" 2>/dev/null)" >/dev/null 2>&1; then
    export SSH_AUTH_SOCK="$SOCKET"
    debug_log "Started new SSH agent"
    return 0
  else
    error_log "Failed to start SSH agent"
    return 1
  fi
}

# Check if existing agent is alive and reachable
if [[ -S "$SOCKET" ]] && SSH_AUTH_SOCK="$SOCKET" ssh-add -l >/dev/null 2>&1; then
  export SSH_AUTH_SOCK="$SOCKET"
  debug_log "Connected to existing SSH agent"
else
  start_ssh_agent
fi

#------------------------------------------------------------------------------
# SSH Key Loading
#------------------------------------------------------------------------------

# Load SSH keys from macOS Keychain (non-interactive)
# This only loads keys whose passphrases are already stored in Keychain
# To add a key to Keychain: ssh-add --apple-use-keychain ~/.ssh/keyname
if [[ -n "$SSH_AUTH_SOCK" ]]; then
  if [[ "$OSTYPE" == "darwin"* ]]; then
    # Load all keys from Keychain without prompting
    ssh-add --apple-load-keychain 2>/dev/null
    debug_log "Loaded SSH keys from Keychain"
  fi
else
  debug_log "SSH agent not available - keys not loaded"
fi

#------------------------------------------------------------------------------
# Cleanup
#------------------------------------------------------------------------------
unset DEBUG_MODE
unset -f debug_log error_log warn_log start_ssh_agent
