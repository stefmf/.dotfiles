#!/usr/bin/env zsh

#==============================================================================
# XDG Base Directory Cleanup Script
#==============================================================================
# Removes old configuration and cache files from legacy locations after
# implementing XDG Base Directory compliance in dotfiles
#==============================================================================

set -euo pipefail

# Check for command line arguments
FROM_BOOTSTRAP=false
ASSUME_YES=false

for arg in "$@"; do
    case "$arg" in
        --from-bootstrap)
            FROM_BOOTSTRAP=true
            ASSUME_YES=true
            ;;
        --assume-yes|--yes|-y)
            ASSUME_YES=true
            ;;
    esac
done

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Header
echo -e "${BLUE}üßπ XDG Base Directory Cleanup${NC}"
echo -e "${BLUE}==============================${NC}"
echo "This script will remove old configuration files from legacy locations."
echo "These files are now managed in XDG-compliant directories."
echo ""

prompt_yes_no() {
    local prompt="$1"
    local default_response="${2:-}"
    local answer suffix

    while true; do
        case "$default_response" in
            y|Y) suffix="(Y/n)" ;;
            n|N) suffix="(y/N)" ;;
            *)   suffix="(y/n)" ;;
        esac

        printf "%s %s " "$prompt" "$suffix"
        if ! IFS= read -r answer; then
            answer=""
        fi

        answer="${answer:l}"

        if [[ -z "$answer" ]]; then
            if [[ "$default_response" == [yY] || "$default_response" == [nN] ]]; then
                answer="${default_response:l}"
            else
                echo -e "${YELLOW}Please enter 'y' or 'n'.${NC}"
                continue
            fi
        fi

        case "$answer" in
            y)
                REPLY="y"
                return 0
                ;;
            n)
                REPLY="n"
                return 1
                ;;
            *)
                echo -e "${YELLOW}Please enter 'y' or 'n'.${NC}"
                ;;
        esac
    done
}

# Function to safely remove a file or directory
safe_remove() {
    local path="$1"
    local description="$2"
    
    if [[ -e "$path" ]]; then
        echo -e "${YELLOW}Found:${NC} $description"
        echo -e "  Location: $path"
        
        # Check if it's a directory or file
        if [[ -d "$path" ]]; then
            echo -e "  Type: Directory ($(du -sh "$path" 2>/dev/null | /usr/bin/cut -f1) size)"
        else
            echo -e "  Type: File ($(/bin/ls -lh "$path" 2>/dev/null | /usr/bin/awk '{print $5}') size)"
        fi
        
        if [[ "$ASSUME_YES" == true ]]; then
            echo -e "  ${BLUE}Removing automatically (non-interactive mode).${NC}"
            /bin/rm -rf "$path"
            echo -e "${GREEN}‚úÖ Removed${NC}"
        elif prompt_yes_no "  Remove this?" "y"; then
            /bin/rm -rf "$path"
            echo -e "${GREEN}‚úÖ Removed${NC}"
        else
            echo -e "${YELLOW}‚è≠Ô∏è  Skipped${NC}"
        fi
        echo ""
    fi
}

echo -e "${BLUE}Checking for legacy files...${NC}"
echo ""

# ZSH related files
safe_remove "$HOME/.zsh_history" "ZSH history file (now in dotfiles/shell/zsh/)"
safe_remove "$HOME/.zcompdump" "ZSH completion dump (now in dotfiles/shell/zsh/)"
safe_remove "$HOME/.zcompdump.zwc" "ZSH completion dump compiled (now in dotfiles/shell/zsh/)"

# Bash legacy files
safe_remove "$HOME/.bashrc" "Bash configuration file (deprecated)"
safe_remove "$HOME/.bash_profile" "Bash profile (deprecated)"
safe_remove "$HOME/.bash_logout" "Bash logout script (deprecated)"
# Note: .profile is intentionally preserved as it contains shell fallback logic

# Sudo marker file created by Ubuntu's installer
safe_remove "$HOME/.sudo_as_admin_successful" "Ubuntu sudo marker file (safe to remove)"

# Application cache and config files
safe_remove "$HOME/.lesshst" "Less history file (now in ~/.cache/less/)"
safe_remove "$HOME/.npm" "NPM cache directory (now uses ~/.cache/npm/)"
safe_remove "$HOME/.npmrc" "NPM config file (now in ~/.config/npm/)"

# Other common XDG non-compliant files that might exist
safe_remove "$HOME/.tldr" "TLDR cache directory (now in ~/.cache/tldr/)"
safe_remove "$HOME/.fzf.zsh" "FZF shell integration (now managed by Zinit)"
safe_remove "$HOME/.fzf.bash" "FZF bash integration (not needed)"

# Oh My Zsh remnants (if any)
safe_remove "$HOME/.oh-my-zsh" "Oh My Zsh directory (now using Zinit + OMZ libs only)"

# Oh My Posh cache files
safe_remove "$HOME/.omp.cache" "Oh My Posh cache file (now uses ~/.cache/oh-my-posh/)"

# Legacy pyenv installation directory
safe_remove "$HOME/.pyenv" "pyenv installation directory (now in ~/.local/share/pyenv/)"

echo -e "${GREEN}üéâ Cleanup complete!${NC}"
echo ""
echo -e "${BLUE}Summary:${NC}"
echo "‚Ä¢ ZSH files: Now in ~/.dotfiles/shell/zsh/"
echo "‚Ä¢ Application configs: Now in ~/.config/"
echo "‚Ä¢ Application caches: Now in ~/.cache/"
echo "‚Ä¢ Application data: Now in ~/.local/share/"
echo ""

# Handle shell restart when invoked from bootstrap
if [[ "$FROM_BOOTSTRAP" == "true" ]]; then
    echo -e "${BLUE}Cleanup completed.${NC}"
    if [[ "$FROM_BOOTSTRAP" == "true" ]]; then
        echo -e "${YELLOW}Note: Shell restart will be handled by the bootstrap script.${NC}"
    fi
    
    # Exit here to prevent any shell restart logic
    echo ""
    echo -e "${GREEN}Your system is now XDG Base Directory compliant! ‚ú®${NC}"
    exit 0
else
    # Ask if user wants to apply changes immediately
    echo -e "${YELLOW}To apply all ZSH configuration changes, you should restart your shell session.${NC}"
    echo ""
    if prompt_yes_no "Would you like to apply the changes now?"; then
    echo -e "${BLUE}Applying configuration changes...${NC}"
    
    # Detect terminal environment and handle accordingly
    if [[ -n "${VSCODE_INJECTION:-}" ]] || [[ "${TERM_PROGRAM:-}" == "vscode" ]] || [[ -n "${VSCODE_PID:-}" ]]; then
        # VS Code integrated terminal
        echo -e "${BLUE}VS Code detected: Restarting shell session...${NC}"
        echo -e "${GREEN}‚ú® Shell session restarted with cleaned XDG configuration! ‚ú®${NC}"
        exec zsh
        
    elif [[ "${TERM_PROGRAM:-}" == "iTerm.app" ]]; then
        # iTerm2 - quit the application
        echo -e "${BLUE}iTerm2 detected: Quitting application...${NC}"
        osascript -e 'tell application "iTerm2" to quit'
        
    elif [[ "${TERM_PROGRAM:-}" == "Apple_Terminal" ]]; then
        # Terminal.app - quit the application
        echo -e "${BLUE}Terminal.app detected: Quitting application...${NC}"
        osascript -e 'tell application "Terminal" to quit'
        
    elif [[ -n "${SSH_CONNECTION:-}" ]] || [[ -n "${SSH_CLIENT:-}" ]] || [[ -n "${SSH_TTY:-}" ]]; then
        # SSH session - restart shell
        echo -e "${BLUE}SSH session detected: Restarting shell...${NC}"
        echo -e "${GREEN}‚ú® Shell session restarted with cleaned XDG configuration! ‚ú®${NC}"
        exec zsh
        
    else
        # Fallback for other integrated terminals or unknown environments
        echo -e "${BLUE}Integrated terminal detected: Attempting to restart shell...${NC}"
        
        # Try exec zsh first
        if command -v zsh >/dev/null 2>&1; then
            echo -e "${GREEN}‚ú® Shell session restarted with cleaned XDG configuration! ‚ú®${NC}"
            exec zsh
        else
            # Fallback to exit if exec fails somehow
            echo -e "${YELLOW}Shell restart failed. Attempting to exit current session...${NC}"
            sleep 1
            exit 0
        fi
    fi
    
    else
        echo -e "${YELLOW}‚è≠Ô∏è  Skipped applying changes.${NC}"
        echo -e "${BLUE}To apply changes manually:${NC}"
        echo -e "  ‚Ä¢ In VS Code: Close terminal and open new one"
        echo -e "  ‚Ä¢ In iTerm2/Terminal: Quit and reopen application"
        echo -e "  ‚Ä¢ In any terminal: Run 'exec zsh'"
    fi
fi

echo ""
echo -e "${GREEN}Your system is now XDG Base Directory compliant! ‚ú®${NC}"